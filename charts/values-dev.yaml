installCRDs: true
multitenancy:
  enabled: false
  defaultServiceAccount: default
  privileged: true
eventsaddr: http://notification-controller/
cli:
  image: ghcr.io/fluxcd/flux-cli
  tag: v0.33.0
  nodeSelector: {}
  affinity: {}
  tolerations: []
helmcontroller:
  create: true
  image: ghcr.io/spartansdataplatform/datainfra-fluxcd
  tag: v0.23.1
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
imageautomationcontroller:
  create: true
  image: ghcr.io/fluxcd/image-automation-controller
  tag: v0.24.2
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
imagereflectorcontroller:
  create: true
  image: ghcr.io/fluxcd/image-reflector-controller
  tag: v0.20.1
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
kustomizecontroller:
  create: true
  image: ghcr.io/fluxcd/kustomize-controller
  tag: v0.27.1
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  secret:
    create: false
    name: ''
    data: {}
  envFrom:
    map:
      name: ''
    secret:
      name: ''
  extraSecretMounts: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
notificationcontroller:
  create: true
  image: ghcr.io/fluxcd/notification-controller
  tag: v0.25.2
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  service:
    labels: {}
    annotations: {}
  webhookReceiver:
    service:
      labels: {}
      annotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
sourcecontroller:
  create: true
  image: ghcr.io/fluxcd/source-controller
  tag: v0.28.0
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 64Mi
  priorityClassName: ''
  annotations:
    prometheus.io/port: '8080'
    prometheus.io/scrape: 'true'
  labels: {}
  container:
    additionalargs: []
  serviceaccount:
    create: true
    annotations: {}
  imagePullPolicy: {}
  service:
    labels: {}
    annotations: {}
  nodeSelector: {}
  affinity: {}
  tolerations: []
  extraEnv: []
policies:
  create: true
rbac:
  create: true
loglevel: info
watchallnamespaces: true
imagePullSecrets:
  - name: regcred
extraObjects: []
prometheus:
  podMonitor:
    create: false
    podMetricsEndpoints:
      - port: http-prom
        relabelings:
          - sourceLabels:
              - __meta_kubernetes_pod_phase
            action: keep
            regex: Running
